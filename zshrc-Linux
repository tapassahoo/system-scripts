# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# update your ~/.zshrc file
FZF_BASE="$HOME/.fzf"
plugins=(git zsh-autosuggestions zsh-syntax-highlighting history colored-man-pages colorize pip python fzf zsh-z)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

export PYTHONPATH="${PYTHONPATH}:$HOME/academic-project/MoRiBS-PIGS/"
export PYTHONPATH="${PYTHONPATH}:$HOME/academic-project/exact-diagonalization/"
export PYTHONPATH="${PYTHONPATH}:$HOME/academic-project/pkg_plot/"
export PYTHONPATH="${PYTHONPATH}:$HOME/academic-project/general-code/"

function intel_module () {
	source /opt/intel/oneapi/setvars.sh intel64
}

g16root=/home/tapas
GAUSS_SCRDIR=/home/tapas/g16
export g16root GAUSS_SCRDIR
. $g16root/g16/bsd/g16.profile

function compresspdf () {
    echo 'Usage: compresspdf [input file] [output file] [screen|ebook|printer|prepress]'
    gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/${3:-"screen"} -dCompatibilityLevel=1.4 -sOutputFile="$2" "$1"
}

function compressjpeg () {
    jpegoptim --size=95k "${1}" --overwrite
}

function cpdf () {
  gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile="$1" "${@:2}"
}

function pdfextractor () {
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -dFirstPage="${1}" -dLastPage="${2}" -sOutputFile="${3%.pdf}_p${1}-p${2}.pdf" "${3}"
}

function pdfpextr ()
{
    # this function uses 3 arguments:
    #     $1 is the first page of the range to extract
    #     $2 is the last page of the range to extract
    #     $3 is the input file
    #     output file will be named "inputfile_pXX-pYY.pdf"
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
       -dFirstPage=${1} \
       -dLastPage=${2} \
       -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
       ${3}
}

function acp () {
  git -C "$1" add .
  git -C "$1" commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C "$1" push
}

function open () {
  xdg-open ${1}
}
#export open

function fmtpython () {
  autopep8 --in-place --aggressive --aggressive ${1}
}

function pyenvs () {
  source ~/venv/bin/activate
}

function acpall () {
  echo ""
  echo "acpall:" `date`
  echo ""
  echo "*****************************************************************************"
#
  git -C ~/vimwiki add .
  git -C ~/vimwiki commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/vimwiki push
  echo ""
  echo "The git directory is ~/vimwiki"
  echo "*****************************************************************************"
#
  rsync -r ~/.ssh/config ${HOME}/academic-project/system-scripts/ssh-config-$(uname)
  rsync -r ~/.vimrc ${HOME}/academic-project/system-scripts/vimrc-script-$(uname)
  rsync -r ~/.zshrc ${HOME}/academic-project/system-scripts/zshrc-$(uname)
  rsync -r ~/.gitignore ${HOME}/academic-project/system-scripts/gitignore-$(uname)
#
  git -C ~/academic-project/system-scripts add .
  git -C ~/academic-project/system-scripts commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/academic-project/system-scripts push
  echo ""
  echo "The git directory is ~/academic-project/system-scripts"
  echo "*****************************************************************************"
#
  git -C ~/academic-writting add .
  git -C ~/academic-writting commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/academic-writting push
  echo ""
  echo "The git directory is ~/academic-writting"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/general-code add .
  git -C ~/academic-project/general-code commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/academic-project/general-code push
  echo ""
  echo "The git directory is ~/academic-project/general-code"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/pkg_plot add .
  git -C ~/academic-project/pkg_plot commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/academic-project/pkg_plot push
  echo ""
  echo "The git directory is ~/academic-project/pkg_plot"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/scripts-for-plotting-data add .
  git -C ~/academic-project/scripts-for-plotting-data commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/academic-project/scripts-for-plotting-data push
  echo ""
  echo "The git directory is ~/academic-project/scripts-for-plotting-data"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/rotational-propagator-for-linear-rotor add .
  git -C ~/academic-project/rotational-propagator-for-linear-rotor commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/academic-project/rotational-propagator-for-linear-rotor push
  echo ""
  echo "The git directory is ~/academic-project/rotational-propagator-for-linear-rotor"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/quantum-chemistry-project add .
  git -C ~/academic-project/quantum-chemistry-project commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/academic-project/quantum-chemistry-project push
  echo ""
  echo "The git directory is ~/academic-project/quantum-chemistry-project"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/output add .
  git -C ~/academic-project/output commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/academic-project/output push
  echo ""
  echo "The git directory is ~/academic-project/output"
  echo "*****************************************************************************"
#
  git -C ~/Documents/backup add .
  git -C ~/Documents/backup commit -m "$(uname): Updated on $(date +"%d-%m-%Y")"
  git -C ~/Documents/backup push
  echo ""
  echo "The git directory is ~/Documents/backup"
  echo "*****************************************************************************"
#
}

function pullall () {
  echo ""
  echo "pullall:" `date`
  echo ""
  echo "*****************************************************************************"
#
  git -C ~/vimwiki pull
  echo ""
  echo "The git directory is ~/vimwiki"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/system-scripts pull
  echo ""
  echo "The git directory is ~/academic-project/system-scripts"
  echo "*****************************************************************************"
#
  git -C ~/academic-writting pull
  echo ""
  echo "The git directory is ~/academic-writting"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/general-code pull
  echo ""
  echo "The git directory is ~/academic-project/general-code"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/pkg_plot pull
  echo ""
  echo "The git directory is ~/academic-project/pkg_plot"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/scripts-for-plotting-data pull
  echo ""
  echo "The git directory is ~/academic-project/scripts-for-plotting-data"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/rotational-propagator-for-linear-rotor pull
  echo ""
  echo "The git directory is ~/academic-project/rotational-propagator-for-linear-rotor"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/quantum-chemistry-project pull
  echo ""
  echo "The git directory is ~/academic-project/quantum-chemistry-project"
  echo "*****************************************************************************"
#
  git -C ~/academic-project/output pull
  echo ""
  echo "The git directory is ~/academic-project/output"
  echo "*****************************************************************************"
#
  git -C ~/Documents/backup pull
  echo ""
  echo "The git directory is ~/Documents/backup"
  echo "*****************************************************************************"
}

export EDITOR=vim
export VISUAL="$EDITOR"

alias gh='xdg-open https://github.com/tapassahoo'
alias grammarly='xdg-open https://app.grammarly.com'
alias dictionary='xdg-open https://dictionary.cambridge.org'
alias shortcuts='xdg-open https://support.apple.com/en-in/guide/terminal/trmlshtcts/mac'
alias libgen='xdg-open https://libgen.is'
alias scihub='xdg-open https://sci-hub.hkvisa.net'
alias wolfram='xdg-open https://www.wolframalpha.com'
alias getbib='xdg-open https://scholar.google.com'
alias wpd='xdg-open https://apps.automeris.io/wpd/'
alias taskwarrior='xdg-open https://ostechnix.com/taskwarrior-command-line-todo-task-manager-application/'
alias manuscript='xdg-open https://jcp.peerx-press.org/cgi-bin/main.plex\?form_type\=dt_folder\&j_id\=62\&ms_id_key\=855ftdX7F74OysE1Q42h2iePVjlQ\&ft_key\=tLg1HHWYwHbAJtWeiHSQJw\&ndt\=AC0A7AZ\&stage\=dat_post_decision_ms'
alias bhsm='xdg-open https://bhsmcampuscare.in'
alias viki='xdg-open ~/vimwiki_html/index.html'

# Frequently used aliases
alias which='which-command'
alias sshnlogn='ssh -X nlogn'
alias sshfeynman='ssh -X feynman'
alias sshgraham='ssh -X graham'
alias sshcedar='ssh -X cedar'
alias sshsnbncbs='ssh -X snbncbs'
alias shutdown='sudo shutdown -h now'
alias restart='sudo shutdown -r now'

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export PATH="/usr/local/bin:$PATH"
export PATH="/home/tapas/.local/bin:$PATH"

export CC=gcc
export CXX=g++
export CPP=g++
export F77=gfortran
export FC=gfortran
